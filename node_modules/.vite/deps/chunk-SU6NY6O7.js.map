{
  "version": 3,
  "sources": ["../../@tauri-apps/api/path.js", "../../@tauri-apps/api/tauri.js", "../../@tauri-apps/api/helpers/tauri.js", "../../@tauri-apps/api/fs.js", "../../@tauri-apps/api/helpers/os-check.js"],
  "sourcesContent": ["import { invokeTauriCommand } from './helpers/tauri.js';\nimport { BaseDirectory } from './fs.js';\nimport { isWindows } from './helpers/os-check.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The path module provides utilities for working with file and directory paths.\n *\n * This package is also accessible with `window.__TAURI__.path` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.path`](https://tauri.app/v1/api/config/#allowlistconfig.path) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"path\": {\n *         \"all\": true, // enable all Path APIs\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Returns the path to the suggested directory for your app config files.\n *\n * @deprecated since 1.2.0: Will be removed in 2.0.0. Use {@link appConfigDir} or {@link appDataDir} instead.\n * @since 1.0.0\n */\nasync function appDir() {\n    return appConfigDir();\n}\n/**\n * Returns the path to the suggested directory for your app's config files.\n * Resolves to `${configDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appConfigDir } from '@tauri-apps/api/path';\n * const appConfigDirPath = await appConfigDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appConfigDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppConfig\n        }\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's data files.\n * Resolves to `${dataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appDataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppData\n        }\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's local data files.\n * Resolves to `${localDataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appLocalDataDir } from '@tauri-apps/api/path';\n * const appLocalDataDirPath = await appLocalDataDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appLocalDataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppLocalData\n        }\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's cache files.\n * Resolves to `${cacheDir}/${bundleIdentifier}`, where `bundleIdentifier` is the value [`tauri.bundle.identifier`](https://tauri.app/v1/api/config/#bundleconfig.identifier) is configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appCacheDir } from '@tauri-apps/api/path';\n * const appCacheDirPath = await appCacheDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appCacheDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppCache\n        }\n    });\n}\n/**\n * Returns the path to the user's audio directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_MUSIC_DIR`.\n * - **macOS:** Resolves to `$HOME/Music`.\n * - **Windows:** Resolves to `{FOLDERID_Music}`.\n * @example\n * ```typescript\n * import { audioDir } from '@tauri-apps/api/path';\n * const audioDirPath = await audioDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function audioDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Audio\n        }\n    });\n}\n/**\n * Returns the path to the user's cache directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CACHE_HOME` or `$HOME/.cache`.\n * - **macOS:** Resolves to `$HOME/Library/Caches`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { cacheDir } from '@tauri-apps/api/path';\n * const cacheDirPath = await cacheDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function cacheDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Cache\n        }\n    });\n}\n/**\n * Returns the path to the user's config directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CONFIG_HOME` or `$HOME/.config`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { configDir } from '@tauri-apps/api/path';\n * const configDirPath = await configDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function configDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Config\n        }\n    });\n}\n/**\n * Returns the path to the user's data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { dataDir } from '@tauri-apps/api/path';\n * const dataDirPath = await dataDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function dataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Data\n        }\n    });\n}\n/**\n * Returns the path to the user's desktop directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DESKTOP_DIR`.\n * - **macOS:** Resolves to `$HOME/Desktop`.\n * - **Windows:** Resolves to `{FOLDERID_Desktop}`.\n * @example\n * ```typescript\n * import { desktopDir } from '@tauri-apps/api/path';\n * const desktopPath = await desktopDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function desktopDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Desktop\n        }\n    });\n}\n/**\n * Returns the path to the user's document directory.\n * @example\n * ```typescript\n * import { documentDir } from '@tauri-apps/api/path';\n * const documentDirPath = await documentDir();\n * ```\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOCUMENTS_DIR`.\n * - **macOS:** Resolves to `$HOME/Documents`.\n * - **Windows:** Resolves to `{FOLDERID_Documents}`.\n *\n * @since 1.0.0\n */\nasync function documentDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Document\n        }\n    });\n}\n/**\n * Returns the path to the user's download directory.\n *\n * #### Platform-specific\n *\n * - **Linux**: Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOWNLOAD_DIR`.\n * - **macOS**: Resolves to `$HOME/Downloads`.\n * - **Windows**: Resolves to `{FOLDERID_Downloads}`.\n * @example\n * ```typescript\n * import { downloadDir } from '@tauri-apps/api/path';\n * const downloadDirPath = await downloadDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function downloadDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Download\n        }\n    });\n}\n/**\n * Returns the path to the user's executable directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_BIN_HOME/../bin` or `$XDG_DATA_HOME/../bin` or `$HOME/.local/bin`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { executableDir } from '@tauri-apps/api/path';\n * const executableDirPath = await executableDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function executableDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Executable\n        }\n    });\n}\n/**\n * Returns the path to the user's font directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME/fonts` or `$HOME/.local/share/fonts`.\n * - **macOS:** Resolves to `$HOME/Library/Fonts`.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { fontDir } from '@tauri-apps/api/path';\n * const fontDirPath = await fontDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function fontDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Font\n        }\n    });\n}\n/**\n * Returns the path to the user's home directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$HOME`.\n * - **macOS:** Resolves to `$HOME`.\n * - **Windows:** Resolves to `{FOLDERID_Profile}`.\n * @example\n * ```typescript\n * import { homeDir } from '@tauri-apps/api/path';\n * const homeDirPath = await homeDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function homeDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Home\n        }\n    });\n}\n/**\n * Returns the path to the user's local data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { localDataDir } from '@tauri-apps/api/path';\n * const localDataDirPath = await localDataDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function localDataDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.LocalData\n        }\n    });\n}\n/**\n * Returns the path to the user's picture directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PICTURES_DIR`.\n * - **macOS:** Resolves to `$HOME/Pictures`.\n * - **Windows:** Resolves to `{FOLDERID_Pictures}`.\n * @example\n * ```typescript\n * import { pictureDir } from '@tauri-apps/api/path';\n * const pictureDirPath = await pictureDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function pictureDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Picture\n        }\n    });\n}\n/**\n * Returns the path to the user's public directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PUBLICSHARE_DIR`.\n * - **macOS:** Resolves to `$HOME/Public`.\n * - **Windows:** Resolves to `{FOLDERID_Public}`.\n * @example\n * ```typescript\n * import { publicDir } from '@tauri-apps/api/path';\n * const publicDirPath = await publicDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function publicDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Public\n        }\n    });\n}\n/**\n * Returns the path to the application's resource directory.\n * To resolve a resource path, see the [[resolveResource | `resolveResource API`]].\n * @example\n * ```typescript\n * import { resourceDir } from '@tauri-apps/api/path';\n * const resourceDirPath = await resourceDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function resourceDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Resource\n        }\n    });\n}\n/**\n * Resolve the path to a resource file.\n * @example\n * ```typescript\n * import { resolveResource } from '@tauri-apps/api/path';\n * const resourcePath = await resolveResource('script.sh');\n * ```\n *\n * @param resourcePath The path to the resource.\n * Must follow the same syntax as defined in `tauri.conf.json > tauri > bundle > resources`, i.e. keeping subfolders and parent dir components (`../`).\n * @returns The full path to the resource.\n *\n * @since 1.0.0\n */\nasync function resolveResource(resourcePath) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: resourcePath,\n            directory: BaseDirectory.Resource\n        }\n    });\n}\n/**\n * Returns the path to the user's runtime directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_RUNTIME_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { runtimeDir } from '@tauri-apps/api/path';\n * const runtimeDirPath = await runtimeDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function runtimeDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Runtime\n        }\n    });\n}\n/**\n * Returns the path to the user's template directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_TEMPLATES_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Resolves to `{FOLDERID_Templates}`.\n * @example\n * ```typescript\n * import { templateDir } from '@tauri-apps/api/path';\n * const templateDirPath = await templateDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function templateDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Template\n        }\n    });\n}\n/**\n * Returns the path to the user's video directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_VIDEOS_DIR`.\n * - **macOS:** Resolves to `$HOME/Movies`.\n * - **Windows:** Resolves to `{FOLDERID_Videos}`.\n * @example\n * ```typescript\n * import { videoDir } from '@tauri-apps/api/path';\n * const videoDirPath = await videoDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function videoDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.Video\n        }\n    });\n}\n/**\n * Returns the path to the suggested log directory.\n *\n * @deprecated since 1.2.0: Will be removed in 2.0.0. Use {@link appLogDir} instead.\n * @since 1.0.0\n */\nasync function logDir() {\n    return appLogDir();\n}\n/**\n * Returns the path to the suggested directory for your app's log files.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * - **macOS:** Resolves to `${homeDir}/Library/Logs/{bundleIdentifier}`\n * - **Windows:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * @example\n * ```typescript\n * import { appLogDir } from '@tauri-apps/api/path';\n * const appLogDirPath = await appLogDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appLogDir() {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolvePath',\n            path: '',\n            directory: BaseDirectory.AppLog\n        }\n    });\n}\n/**\n * Provides the platform-specific path segment separator:\n * - `\\` on Windows\n * - `/` on POSIX\n *\n * @since 1.0.0\n */\nconst sep = isWindows() ? '\\\\' : '/';\n/**\n * Provides the platform-specific path segment delimiter:\n * - `;` on Windows\n * - `:` on POSIX\n *\n * @since 1.0.0\n */\nconst delimiter = isWindows() ? ';' : ':';\n/**\n * Resolves a sequence of `paths` or `path` segments into an absolute path.\n * @example\n * ```typescript\n * import { resolve, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await resolve(appDataDirPath, '..', 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function resolve(...paths) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'resolve',\n            paths\n        }\n    });\n}\n/**\n * Normalizes the given `path`, resolving `'..'` and `'.'` segments and resolve symbolic links.\n * @example\n * ```typescript\n * import { normalize, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await normalize(appDataDirPath, '..', 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function normalize(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'normalize',\n            path\n        }\n    });\n}\n/**\n *  Joins all given `path` segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.\n * @example\n * ```typescript\n * import { join, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await join(appDataDirPath, 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function join(...paths) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'join',\n            paths\n        }\n    });\n}\n/**\n * Returns the directory name of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { dirname } from '@tauri-apps/api/path';\n * const dir = await dirname('/path/to/somedir/');\n * assert(dir === 'somedir');\n * ```\n *\n * @since 1.0.0\n */\nasync function dirname(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'dirname',\n            path\n        }\n    });\n}\n/**\n * Returns the extension of the `path`.\n * @example\n * ```typescript\n * import { extname } from '@tauri-apps/api/path';\n * const ext = await extname('/path/to/file.html');\n * assert(ext === 'html');\n * ```\n *\n * @since 1.0.0\n */\nasync function extname(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'extname',\n            path\n        }\n    });\n}\n/**\n * Returns the last portion of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { basename } from '@tauri-apps/api/path';\n * const base = await basename('path/to/app.conf');\n * assert(base === 'app.conf');\n * ```\n *\n * @param ext An optional file extension to be removed from the returned path.\n *\n * @since 1.0.0\n */\nasync function basename(path, ext) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'basename',\n            path,\n            ext\n        }\n    });\n}\n/**\n * Returns whether the path is absolute or not.\n * @example\n * ```typescript\n * import { isAbsolute } from '@tauri-apps/api/path';\n * assert(await isAbsolute('/home/tauri'));\n * ```\n *\n * @since 1.0.0\n */\nasync function isAbsolute(path) {\n    return invokeTauriCommand({\n        __tauriModule: 'Path',\n        message: {\n            cmd: 'isAbsolute',\n            path\n        }\n    });\n}\n\nexport { BaseDirectory, appCacheDir, appConfigDir, appDataDir, appDir, appLocalDataDir, appLogDir, audioDir, basename, cacheDir, configDir, dataDir, delimiter, desktopDir, dirname, documentDir, downloadDir, executableDir, extname, fontDir, homeDir, isAbsolute, join, localDataDir, logDir, normalize, pictureDir, publicDir, resolve, resolveResource, resourceDir, runtimeDir, sep, templateDir, videoDir };\n", "// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nfunction uid() {\n    return window.crypto.getRandomValues(new Uint32Array(1))[0];\n}\n/**\n * Transforms a callback function to a string identifier that can be passed to the backend.\n * The backend uses the identifier to `eval()` the callback.\n *\n * @return A unique identifier associated with the callback function.\n *\n * @since 1.0.0\n */\nfunction transformCallback(callback, once = false) {\n    const identifier = uid();\n    const prop = `_${identifier}`;\n    Object.defineProperty(window, prop, {\n        value: (result) => {\n            if (once) {\n                Reflect.deleteProperty(window, prop);\n            }\n            return callback === null || callback === void 0 ? void 0 : callback(result);\n        },\n        writable: false,\n        configurable: true\n    });\n    return identifier;\n}\n/**\n * Sends a message to the backend.\n * @example\n * ```typescript\n * import { invoke } from '@tauri-apps/api/tauri';\n * await invoke('login', { user: 'tauri', password: 'poiwe3h4r5ip3yrhtew9ty' });\n * ```\n *\n * @param cmd The command name.\n * @param args The optional arguments to pass to the command.\n * @return A promise resolving or rejecting to the backend response.\n *\n * @since 1.0.0\n */\nasync function invoke(cmd, args = {}) {\n    return new Promise((resolve, reject) => {\n        const callback = transformCallback((e) => {\n            resolve(e);\n            Reflect.deleteProperty(window, `_${error}`);\n        }, true);\n        const error = transformCallback((e) => {\n            reject(e);\n            Reflect.deleteProperty(window, `_${callback}`);\n        }, true);\n        window.__TAURI_IPC__({\n            cmd,\n            callback,\n            error,\n            ...args\n        });\n    });\n}\n/**\n * Convert a device file path to an URL that can be loaded by the webview.\n * Note that `asset:` and `https://asset.localhost` must be added to [`tauri.security.csp`](https://tauri.app/v1/api/config/#securityconfig.csp) in `tauri.conf.json`.\n * Example CSP value: `\"csp\": \"default-src 'self'; img-src 'self' asset: https://asset.localhost\"` to use the asset protocol on image sources.\n *\n * Additionally, `asset` must be added to [`tauri.allowlist.protocol`](https://tauri.app/v1/api/config/#allowlistconfig.protocol)\n * in `tauri.conf.json` and its access scope must be defined on the `assetScope` array on the same `protocol` object.\n * For example:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"protocol\": {\n *         \"asset\": true,\n *         \"assetScope\": [\"$APPDATA/assets/*\"]\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param  filePath The file path.\n * @param  protocol The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol.\n * @example\n * ```typescript\n * import { appDataDir, join } from '@tauri-apps/api/path';\n * import { convertFileSrc } from '@tauri-apps/api/tauri';\n * const appDataDirPath = await appDataDir();\n * const filePath = await join(appDataDirPath, 'assets/video.mp4');\n * const assetUrl = convertFileSrc(filePath);\n *\n * const video = document.getElementById('my-video');\n * const source = document.createElement('source');\n * source.type = 'video/mp4';\n * source.src = assetUrl;\n * video.appendChild(source);\n * video.load();\n * ```\n *\n * @return the URL that can be used as source on the webview.\n *\n * @since 1.0.0\n */\nfunction convertFileSrc(filePath, protocol = 'asset') {\n    return window.__TAURI__.convertFileSrc(filePath, protocol);\n}\n\nexport { convertFileSrc, invoke, transformCallback };\n", "import { invoke } from '../tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nasync function invokeTauriCommand(command) {\n    return invoke('tauri', command);\n}\n\nexport { invokeTauriCommand };\n", "import { invokeTauriCommand } from './helpers/tauri.js';\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Access the file system.\n *\n * This package is also accessible with `window.__TAURI__.fs` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.fs`](https://tauri.app/v1/api/config/#allowlistconfig.fs) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"fs\": {\n *         \"all\": true, // enable all FS APIs\n *         \"readFile\": true,\n *         \"writeFile\": true,\n *         \"readDir\": true,\n *         \"copyFile\": true,\n *         \"createDir\": true,\n *         \"removeDir\": true,\n *         \"removeFile\": true,\n *         \"renameFile\": true,\n *         \"exists\": true\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n *\n * ## Security\n *\n * This module prevents path traversal, not allowing absolute paths or parent dir components\n * (i.e. \"/usr/path/to/file\" or \"../path/to/file\" paths are not allowed).\n * Paths accessed with this API must be relative to one of the {@link BaseDirectory | base directories}\n * so if you need access to arbitrary filesystem paths, you must write such logic on the core layer instead.\n *\n * The API has a scope configuration that forces you to restrict the paths that can be accessed using glob patterns.\n *\n * The scope configuration is an array of glob patterns describing folder paths that are allowed.\n * For instance, this scope configuration only allows accessing files on the\n * *databases* folder of the {@link path.appDataDir | $APPDATA directory}:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"fs\": {\n *         \"scope\": [\"$APPDATA/databases/*\"]\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * Notice the use of the `$APPDATA` variable. The value is injected at runtime, resolving to the {@link path.appDataDir | app data directory}.\n * The available variables are:\n * {@link path.appConfigDir | `$APPCONFIG`}, {@link path.appDataDir | `$APPDATA`}, {@link path.appLocalDataDir | `$APPLOCALDATA`},\n * {@link path.appCacheDir | `$APPCACHE`}, {@link path.appLogDir | `$APPLOG`},\n * {@link path.audioDir | `$AUDIO`}, {@link path.cacheDir | `$CACHE`}, {@link path.configDir | `$CONFIG`}, {@link path.dataDir | `$DATA`},\n * {@link path.localDataDir | `$LOCALDATA`}, {@link path.desktopDir | `$DESKTOP`}, {@link path.documentDir | `$DOCUMENT`},\n * {@link path.downloadDir | `$DOWNLOAD`}, {@link path.executableDir | `$EXE`}, {@link path.fontDir | `$FONT`}, {@link path.homeDir | `$HOME`},\n * {@link path.pictureDir | `$PICTURE`}, {@link path.publicDir | `$PUBLIC`}, {@link path.runtimeDir | `$RUNTIME`},\n * {@link path.templateDir | `$TEMPLATE`}, {@link path.videoDir | `$VIDEO`}, {@link path.resourceDir | `$RESOURCE`}, {@link path.appDir | `$APP`},\n * {@link path.logDir | `$LOG`}, {@link os.tempdir | `$TEMP`}.\n *\n * Trying to execute any API with a URL not configured on the scope results in a promise rejection due to denied access.\n *\n * Note that this scope applies to **all** APIs on this module.\n *\n * @module\n */\n/**\n * @since 1.0.0\n */\nvar BaseDirectory;\n(function (BaseDirectory) {\n    BaseDirectory[BaseDirectory[\"Audio\"] = 1] = \"Audio\";\n    BaseDirectory[BaseDirectory[\"Cache\"] = 2] = \"Cache\";\n    BaseDirectory[BaseDirectory[\"Config\"] = 3] = \"Config\";\n    BaseDirectory[BaseDirectory[\"Data\"] = 4] = \"Data\";\n    BaseDirectory[BaseDirectory[\"LocalData\"] = 5] = \"LocalData\";\n    BaseDirectory[BaseDirectory[\"Desktop\"] = 6] = \"Desktop\";\n    BaseDirectory[BaseDirectory[\"Document\"] = 7] = \"Document\";\n    BaseDirectory[BaseDirectory[\"Download\"] = 8] = \"Download\";\n    BaseDirectory[BaseDirectory[\"Executable\"] = 9] = \"Executable\";\n    BaseDirectory[BaseDirectory[\"Font\"] = 10] = \"Font\";\n    BaseDirectory[BaseDirectory[\"Home\"] = 11] = \"Home\";\n    BaseDirectory[BaseDirectory[\"Picture\"] = 12] = \"Picture\";\n    BaseDirectory[BaseDirectory[\"Public\"] = 13] = \"Public\";\n    BaseDirectory[BaseDirectory[\"Runtime\"] = 14] = \"Runtime\";\n    BaseDirectory[BaseDirectory[\"Template\"] = 15] = \"Template\";\n    BaseDirectory[BaseDirectory[\"Video\"] = 16] = \"Video\";\n    BaseDirectory[BaseDirectory[\"Resource\"] = 17] = \"Resource\";\n    BaseDirectory[BaseDirectory[\"App\"] = 18] = \"App\";\n    BaseDirectory[BaseDirectory[\"Log\"] = 19] = \"Log\";\n    BaseDirectory[BaseDirectory[\"Temp\"] = 20] = \"Temp\";\n    BaseDirectory[BaseDirectory[\"AppConfig\"] = 21] = \"AppConfig\";\n    BaseDirectory[BaseDirectory[\"AppData\"] = 22] = \"AppData\";\n    BaseDirectory[BaseDirectory[\"AppLocalData\"] = 23] = \"AppLocalData\";\n    BaseDirectory[BaseDirectory[\"AppCache\"] = 24] = \"AppCache\";\n    BaseDirectory[BaseDirectory[\"AppLog\"] = 25] = \"AppLog\";\n})(BaseDirectory || (BaseDirectory = {}));\n/**\n * Reads a file as an UTF-8 encoded string.\n * @example\n * ```typescript\n * import { readTextFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Read the text file in the `$APPCONFIG/app.conf` path\n * const contents = await readTextFile('app.conf', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @since 1.0.0\n */\nasync function readTextFile(filePath, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'readTextFile',\n            path: filePath,\n            options\n        }\n    });\n}\n/**\n * Reads a file as byte array.\n * @example\n * ```typescript\n * import { readBinaryFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Read the image file in the `$RESOURCEDIR/avatar.png` path\n * const contents = await readBinaryFile('avatar.png', { dir: BaseDirectory.Resource });\n * ```\n *\n * @since 1.0.0\n */\nasync function readBinaryFile(filePath, options = {}) {\n    const arr = await invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'readFile',\n            path: filePath,\n            options\n        }\n    });\n    return Uint8Array.from(arr);\n}\n/**\n * Writes a UTF-8 text file.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function writeTextFile(path, contents, options) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    if (typeof path === 'object') {\n        Object.freeze(path);\n    }\n    const file = { path: '', contents: '' };\n    let fileOptions = options;\n    if (typeof path === 'string') {\n        file.path = path;\n    }\n    else {\n        file.path = path.path;\n        file.contents = path.contents;\n    }\n    if (typeof contents === 'string') {\n        file.contents = contents !== null && contents !== void 0 ? contents : '';\n    }\n    else {\n        fileOptions = contents;\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'writeFile',\n            path: file.path,\n            contents: Array.from(new TextEncoder().encode(file.contents)),\n            options: fileOptions\n        }\n    });\n}\n/**\n * Writes a byte array content to a file.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function writeBinaryFile(path, contents, options) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    if (typeof path === 'object') {\n        Object.freeze(path);\n    }\n    const file = { path: '', contents: [] };\n    let fileOptions = options;\n    if (typeof path === 'string') {\n        file.path = path;\n    }\n    else {\n        file.path = path.path;\n        file.contents = path.contents;\n    }\n    if (contents && 'dir' in contents) {\n        fileOptions = contents;\n    }\n    else if (typeof path === 'string') {\n        // @ts-expect-error in this case `contents` is always a BinaryFileContents\n        file.contents = contents !== null && contents !== void 0 ? contents : [];\n    }\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'writeFile',\n            path: file.path,\n            contents: Array.from(file.contents instanceof ArrayBuffer\n                ? new Uint8Array(file.contents)\n                : file.contents),\n            options: fileOptions\n        }\n    });\n}\n/**\n * List directory files.\n * @example\n * ```typescript\n * import { readDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Reads the `$APPDATA/users` directory recursively\n * const entries = await readDir('users', { dir: BaseDirectory.AppData, recursive: true });\n *\n * function processEntries(entries) {\n *   for (const entry of entries) {\n *     console.log(`Entry: ${entry.path}`);\n *     if (entry.children) {\n *       processEntries(entry.children)\n *     }\n *   }\n * }\n * ```\n *\n * @since 1.0.0\n */\nasync function readDir(dir, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'readDir',\n            path: dir,\n            options\n        }\n    });\n}\n/**\n * Creates a directory.\n * If one of the path's parent components doesn't exist\n * and the `recursive` option isn't set to true, the promise will be rejected.\n * @example\n * ```typescript\n * import { createDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Create the `$APPDATA/users` directory\n * await createDir('users', { dir: BaseDirectory.AppData, recursive: true });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function createDir(dir, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'createDir',\n            path: dir,\n            options\n        }\n    });\n}\n/**\n * Removes a directory.\n * If the directory is not empty and the `recursive` option isn't set to true, the promise will be rejected.\n * @example\n * ```typescript\n * import { removeDir, BaseDirectory } from '@tauri-apps/api/fs';\n * // Remove the directory `$APPDATA/users`\n * await removeDir('users', { dir: BaseDirectory.AppData });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function removeDir(dir, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'removeDir',\n            path: dir,\n            options\n        }\n    });\n}\n/**\n * Copies a file to a destination.\n * @example\n * ```typescript\n * import { copyFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Copy the `$APPCONFIG/app.conf` file to `$APPCONFIG/app.conf.bk`\n * await copyFile('app.conf', 'app.conf.bk', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function copyFile(source, destination, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'copyFile',\n            source,\n            destination,\n            options\n        }\n    });\n}\n/**\n * Removes a file.\n * @example\n * ```typescript\n * import { removeFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Remove the `$APPConfig/app.conf` file\n * await removeFile('app.conf', { dir: BaseDirectory.AppConfig });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function removeFile(file, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'removeFile',\n            path: file,\n            options\n        }\n    });\n}\n/**\n * Renames a file.\n * @example\n * ```typescript\n * import { renameFile, BaseDirectory } from '@tauri-apps/api/fs';\n * // Rename the `$APPDATA/avatar.png` file\n * await renameFile('avatar.png', 'deleted.png', { dir: BaseDirectory.AppData });\n * ```\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n */\nasync function renameFile(oldPath, newPath, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'renameFile',\n            oldPath,\n            newPath,\n            options\n        }\n    });\n}\n/**\n * Check if a path exists.\n * @example\n * ```typescript\n * import { exists, BaseDirectory } from '@tauri-apps/api/fs';\n * // Check if the `$APPDATA/avatar.png` file exists\n * await exists('avatar.png', { dir: BaseDirectory.AppData });\n * ```\n *\n * @since 1.1.0\n */\nasync function exists(path, options = {}) {\n    return invokeTauriCommand({\n        __tauriModule: 'Fs',\n        message: {\n            cmd: 'exists',\n            path,\n            options\n        }\n    });\n}\n\nexport { BaseDirectory, BaseDirectory as Dir, copyFile, createDir, exists, readBinaryFile, readDir, readTextFile, removeDir, removeFile, renameFile, writeBinaryFile, writeTextFile as writeFile, writeTextFile };\n", "// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nfunction isWindows() {\n    return navigator.appVersion.includes('Win');\n}\n\nexport { isWindows };\n"],
  "mappings": "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",
  "names": ["resolve", "BaseDirectory"]
}
